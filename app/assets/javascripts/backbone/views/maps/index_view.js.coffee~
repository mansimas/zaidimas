Sprint.Views.Maps ||= {}

class Sprint.Views.Maps.IndexView extends Backbone.View
  constructor: (options) ->
    this.configure(options || {})
    Backbone.View.prototype.constructor.apply(this, arguments)
  configure: (options) ->
    if (this.options) 
      options = _.extend({}, _.result(this, 'options'), options)
    this.options = options

  initialize: -> 
    self = this
    channel.bind('event_name', (data) ->
      self.get_all_mobs(data)
      if data.id is 0
        console.log(data))					# websocket
    if move_on_count is 0
      @addAll()
      @game_init_function()
      
  addAll: () =>
    @options.monsters.each(@addOne)
  addOne: (monster) =>
    mob_list[monster.attributes.id] = monster.attributes 
    
  game_init_function: ->
    @ca = document.getElementById("maps")
    @ctx = @ca.getContext "2d"
    @move_on()
    
  get_all_mobs: (mob) ->
    mob_list[mob.id] = mob
    mob_speed = 5*web_refresh_time/1000
    steps = parseInt(Math.sqrt((mob.xposDest-mob.xpos)*(mob.xposDest-mob.xpos)+
    (mob.yposDest-mob.ypos)*(mob.yposDest-mob.ypos))/mob_speed)
    mob_list[mob.id].steps = steps
    
  fps = 40
  last_loop = new Date
  mob_list = []
  target_position = mouseX: 500, mouseY: 250
  this_position = mouseX: 480, mouseY: 240
  player_steps = 10
  player_moving_speed = 3
  move_on = 1
  alfas = "true"
  checked_monster = cid: -1
  player_width = 10
  player_height = 10
  enemy_width = 20
  enemy_height = 20
  Xerror = 2
  Yerror = 3
  move_allowed = 1
  player_hp = 0
  enemy_hp = 0
  move_on_count = 0
  attacking = -1
  attacking_allowed = true
  level = 0
  mspeed = 0.25
  web_refresh_time = 50 #milliseconds
  
  move_on: ->
    move_on_count++
    self = this
    timer web_refresh_time, ()-> self.checking_or_moved()
    timer 1000, ()-> self.mob_speed_to_FPS
    level = router.stats.models[0].attributes.level
    
  checking_or_moved: ->
    @canvas()
    @player_movement()
    
  mob_speed_to_FPS: ->
    this_loop = new Date
    fps = parseInt(20000 / (this_loop - last_loop))+1
    mspeed = 0.25*(fps/20).toFixed(2)
    speed = 1*(fps/20).toFixed(2)
    last_loop = this_loop
   
  target_line: (width, height, rgba, mob) ->
    ctx = @ctx
    ctx.beginPath()
    ctx.lineWidth = 0.5
    ctx.lineCap = 'round'
    ctx.strokeStyle = rgba
    ctx.moveTo(mob.xpos+width/2,mob.ypos+height/2)
    ctx.lineTo(mob.xposDest+width/2,mob.yposDest+height/2)
    ctx.stroke()
    ctx.beginPath()
    ctx.strokeStyle = "red"
    ctx.arc(mob.xposDest+width/2,mob.yposDest+height/2,2,0,2*Math.PI)   
    ctx.stroke()
    
  monster_rendering: ->
    for mob in mob_list
      MobXpos = mob.xpos
      MobYpos = mob.ypos
      diff = mob.level - level
      @ctx.beginPath()
      if diff is 0
        @ctx.fillStyle = 'green'
      if diff is -1
        @ctx.fillStyle = 'green'
      if diff is -2
        @ctx.fillStyle = 'blue'
      if diff is -3
        @ctx.fillStyle = 'blue'
      if diff is -4
        @ctx.fillStyle = 'blue'
      if diff is -5
        @ctx.fillStyle = 'blue'
      if diff is -6
        @ctx.fillStyle = 'blue'
      if diff < -6
        @ctx.fillStyle = 'gray'
      if diff is 1
        @ctx.fillStyle = 'orange'
      if diff is 2
        @ctx.fillStyle = 'orange'
      if diff is 3
        @ctx.fillStyle = 'orange'
      if diff > 3
        @ctx.fillStyle = 'red'
      @ctx.fillRect(MobXpos, MobYpos, enemy_width, enemy_height)
      @ctx.fillStyle = '#000000'
      @ctx.font = '7px sans-serif'
      @ctx.textBaseline = 'top'
      @ctx.fillText(mob.level, MobXpos+enemy_width+2, MobYpos)
      @target_line(enemy_width, enemy_height, "rgba(32, 45, 21, 0.2)", mob)
      if mob.attacked is 0
        @mob_start_moving(mob)
        mob_list[mob.id].steps -= 1  
  
  player_rendering: ->
    @recalculatePlayerTarget()
    player_steps -= 1
    @ctx.fillStyle="rgba(25,25,112,1)"
    @ctx.fillRect(this_position.mouseX-player_width/2, this_position.mouseY-player_height/2, player_width, player_height)
    @ctx.fillStyle = '#000000'
    @ctx.font = '7px sans-serif'
    @ctx.textBaseline = 'top'
    @ctx.fillText(level, this_position.mouseX+7, this_position.mouseY)
    player_object = {xpos: this_position.mouseX-player_width/2, ypos: this_position.mouseY-player_height/2,
    xposDest: target_position.mouseX-player_width/2, yposDest: target_position.mouseY-player_height/2}
    @target_line(player_width, player_height, "red", player_object)    
    
  canvas: ->
    rect = @ca.getBoundingClientRect()
    @ctx.clearRect(rect.top, rect.left, 1500, 500)				# reset the canvas   
    @writing_levels_on_objects_and_health_bars()			
    @monster_rendering()
    @player_rendering()
    if move_allowed is 1
      @ctx.canvas.onmousemove = (evt) ->							# On every mouse move get the mouse position in map
        atcanvas = evt.target											# the  calculated mouse position is canvas area
        context = atcanvas.getContext('2d')
        mouseX  = evt.clientX-Xerror								# Mouse X position
        mouseY  = evt.clientY-Yerror								# Mouse Y position
        for mob in mob_list											# Array of all possible enemies in Map, which You can see
          mob_id = mob.id												
          Xpos = mob.xpos
          Ypos = mob.ypos					         
          if mouseX > Xpos-enemy_width/2+Xerror*4 and mouseX< 
          Xpos+enemy_width/2+Xerror*4 and mouseY>
          Ypos-enemy_height/2+Yerror*2 and mouseY<
          Ypos+enemy_height/2+Yerror*4												# If this enemy is where the mouse Positions is
            atcanvas.style.cursor = 'pointer'									# Mouse image is "hand"
            context.canvas.onmousedown= () ->									# If the mouse Left button is Pressed
              target_position = mouseX: Xpos+
              enemy_width/2, mouseY: Ypos+enemy_height/2				      #  the position, so here You will move
              player_steps = parseInt(Math.sqrt((target_position.mouseX-this_position.mouseX)*
              (target_position.mouseX-this_position.mouseX)+(target_position.mouseY-this_position.mouseY)*
              (target_position.mouseY-this_position.mouseY))/(player_moving_speed*web_refresh_time/100))
              move_on = 1																# Start moving is Allowed
              checked_monster = cid: mob_id
            return    
        atcanvas.style.cursor = 'default'									# Now set mouse image to "Arrow" again, at every frame
        context.canvas.onmousedown= () ->									# If mouse is pressed anywhere on Map
          target_position = mouseX: mouseX, mouseY: mouseY				#  these X and Y positions
          player_steps = parseInt(Math.sqrt((target_position.mouseX-this_position.mouseX)*
          (target_position.mouseX-this_position.mouseX)+(target_position.mouseY-this_position.mouseY)*
          (target_position.mouseY-this_position.mouseY))/(player_moving_speed*web_refresh_time/100))
          move_on = 1																# Start moving is Allowed
          checked_monster = cid: -1											# Dont attack any monsters you did before
          return			

  player_movement: ->
    self = this   
    if router.stats.models[0].attributes.attack_allow is true
      move_allowed = 1
    if player_steps <= 0
      player_steps = 0
      move_on = 0																			# if yes, stop moving
      if checked_monster.cid > -1
        #@attack_monster(checked_monster.cid)
        move_allowed = 0
        attacking = checked_monster.cid
        checked_monster.cid = -1
        attacking_allowed = false
    if move_on is 1 and move_allowed is 1											# if it still not on destination																							
        self.player_start_moving()

  attack_monster: (cid) ->
    if router.stats.models[0].attributes.attack_allow is true
      dispatcher.trigger('player_attacks_enemy', mob_list[cid])
      router.send_monster_to_root(cid)
      
  recalculatePlayerTarget: () ->
    if checked_monster.cid > -1
      target_position = mouseX: mob_list[checked_monster.cid].xpos+enemy_width/2, 
      mouseY: mob_list[checked_monster.cid].ypos+enemy_height/2
      player_steps = parseInt(Math.sqrt((target_position.mouseX-this_position.mouseX)*
      (target_position.mouseX-this_position.mouseX)+(target_position.mouseY-this_position.mouseY)*
      (target_position.mouseY-this_position.mouseY))/(player_moving_speed*web_refresh_time/100))
       
  set_attack_allowed: (monster_id) ->
    attacking_allowed = true
    mob_list[monster_id].attacked = 0
    dispatcher.trigger('player_killed_enemy', monster_id)

  writing_levels_on_objects_and_health_bars: ->  
    @ctx.fillStyle="red"
    @ctx.fillRect(5,335, 20, -(330*router.stats.models[0].attributes.player_hp/router.stats.models[0].attributes.max_hp))
    #if checked_monster.cid > -1
      #@ctx.fillRect(1075,335, 20, -(330*(mob_list[checked_monster.cid].health)/(mob_list[checked_monster.cid].max_health)))
    @ctx.fillRect(1075,335, 20, -(330*router.stats.models[0].attributes.monster_hp/
    router.stats.models[0].attributes.monster_max_hp))   
    @ctx.strokeStyle="black"
    @ctx.strokeRect(5,335, 20, -330)
    @ctx.strokeRect(1075,335, 20, -330)    
    @ctx.fillStyle = '#000000'
    @ctx.font = '20px sans-serif'
    @ctx.textBaseline = 'top'
    @ctx.fillText("Your HP", 5, 340)    
    @ctx.fillStyle = '#000000'
    @ctx.font = '20px sans-serif'
    @ctx.textBaseline = 'top'
    @ctx.fillText(router.stats.models[0].attributes.player_hp, 5, 360) 
    @ctx.fillStyle = '#000000'
    @ctx.font = '20px sans-serif'
    @ctx.textBaseline = 'top'
    if checked_monster.cid > -1
      @ctx.fillText("Enemy HP", 985, 340)
    @ctx.fillStyle = '#000000'
    @ctx.font = '20px sans-serif'
    @ctx.textBaseline = 'top'
    if checked_monster.cid > -1
      @ctx.fillText(mob_list[checked_monster.cid].health, 985, 360)  
      
  player_start_moving: ->
    this_position.mouseX = (1-1/player_steps)*this_position.mouseX+1/player_steps*target_position.mouseX
    this_position.mouseY = (1-1/player_steps)*this_position.mouseY+1/player_steps*target_position.mouseY
    alfas = "true"		

  mob_start_moving: (mob) ->
    mob_list[mob.id].xpos = (1-1/mob.steps)*mob.xpos+1/mob.steps*mob.xposDest
    mob_list[mob.id].ypos = (1-1/mob.steps)*mob.ypos+1/mob.steps*mob.yposDest
      
  window.delay = (ms, fn)-> setTimeout(fn, ms)
  randomInt = (lower, upper) ->
    [lower, upper] = [0, lower]     unless upper?           # Called with one argument
    [lower, upper] = [upper, lower] if lower > upper        # Lower must be less then upper
    Math.floor(Math.random() * (upper - lower + 1) + lower) # Last statement is a return value
    
  render: =>
    console.log("render", @options)


