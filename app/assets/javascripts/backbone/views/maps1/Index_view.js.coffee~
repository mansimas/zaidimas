Sprint.Views.Maps1 ||= {}

class Sprint.Views.Maps1.IndexView extends Backbone.View
  template: JST["backbone/templates/maps1/index"]
  constructor: (options) ->
    this.configure(options || {})
    Backbone.View.prototype.constructor.apply(this, arguments)
  configure: (options) ->
    if (this.options) 
      options = _.extend({}, _.result(this, 'options'), options)
    this.options = options
    
    
    
  initialize: ->
    @ca = document.getElementById("maps")
    @ctx = @ca.getContext "2d"
    @move_on()
    @canvas_init()

  render: =>
    @canvas()
    @timer_to_destination()
    return this
    
  

  rerender: =>
    @render()

  window.delay = (ms, fn)-> setTimeout(fn, ms)
  randomInt = (lower, upper) ->
    [lower, upper] = [0, lower]     unless upper?           # Called with one argument
    [lower, upper] = [upper, lower] if lower > upper        # Lower must be less then upper
    Math.floor(Math.random() * (upper - lower + 1) + lower) # Last statement is a return value
  
  

  enemy_count = []
  target_position = mouseX: 100, mouseY: 100
  this_position = mouseX: 100, mouseY: 100
  last_position = mouseX: 100, mouseY: 100
  enemy1_position =  X: 150, Y: 150
  diffX = 0
  diffY = 0
  speed = 1
  move_on = 1
  alfas = "true"
  checked_monster = 0
  
  move_on: ->
    self = this
    timer 200, ()-> self.checking_or_moved()
    
  checking_or_moved: ->
    if move_on is 1
      @timer_to_destination()
    else
      return
      
    
  canvas_init: ->
    level = router.stats.models[0].attributes.level
    rect = @ca.getBoundingClientRect()
    ctx = @ctx
    ctx.levels = level-10
    ixas = -20
    for count in [(level-10)...(level+10)]
      place_in_map = randomInt(10,100)
      ctx.levels = ctx.levels+1
      if ctx.levels > 0
        ixas = ixas + 40
        diff = ctx.levels - level
        ctx.beginPath()
        if diff is 0
          ctx.fillStyle = 'green'
        if diff is -1
          ctx.fillStyle = 'green'
        if diff is -2
          ctx.fillStyle = 'blue'
        if diff is -3
          ctx.fillStyle = 'blue'
        if diff is -4
          ctx.fillStyle = 'blue'
        if diff is -5
          ctx.fillStyle = 'blue'
        if diff is -6
          ctx.fillStyle = 'blue'
        if diff < -6
          ctx.fillStyle = 'gray'
        if diff is 1
          ctx.fillStyle = 'orange'
        if diff is 2
          ctx.fillStyle = 'orange'
        if diff is 3
          ctx.fillStyle = 'orange'
        if diff > 3
          ctx.fillStyle = 'red'
        ctx.arc(ixas,place_in_map, 6, 0,2 * Math.PI)
        ctx.fill()
        enemy_count.push ixass:ixas, level:ctx.levels, places:place_in_map

        
        
  
  canvas: ->


    @ctx.beginPath()
    @ctx.fillStyle = 'green'
    @ctx.arc(this_position.mouseX,this_position.mouseY,6,0,2*Math.PI)
    @ctx.globalCompositeOperation = 'copy'
    @ctx.fillStyle = 'red'
    @ctx.arc(enemy1_position.X,enemy1_position.Y,6,0,2*Math.PI)
    @ctx.fill()

    
    rect = @ca.getBoundingClientRect()


 
        
    @ctx.canvas.onmousemove = (evt) ->
      atcanvas = evt.target
      context = atcanvas.getContext('2d')
      mouseX  = evt.clientX-rect.top
      mouseY  = evt.clientY-rect.left
      for count in enemy_count
        ctx_levels = count.level
        ixass= count.ixass
        place= count.places
        if ctx_levels > 0
          context.beginPath()
          context.arc(ixass,place, 6, 0,2 * Math.PI, false)
          if (context.isPointInPath(mouseX, mouseY)) 
            atcanvas.style.cursor = 'pointer'
            context.canvas.onmousedown= () ->
              target_position = mouseX: mouseX, mouseY: mouseY
              diffX = target_position.mouseX - this_position.mouseX
              diffY = target_position.mouseY - this_position.mouseY
              move_on = 1
              checked_monster = ixass
            return  
          if (context.isPointInPath(this_position.mouseX, this_position.mouseY)) and checked_monster is ixass
            router.send_maps_to_monsters(ctx_levels-1)
            ckecked_monster = 0  
      atcanvas.style.cursor = 'default'
      context.canvas.onmousedown= () ->
        target_position = mouseX: mouseX, mouseY: mouseY
        diffX = target_position.mouseX - this_position.mouseX
        diffY = target_position.mouseY - this_position.mouseY
        move_on = 1
        checked_monster = 0
        return

  timer_to_destination: ->
    self = this
    @ctx.beginPath()
    @ctx.arc(this_position.mouseX,this_position.mouseY,6,0,2*Math.PI)
    if (@ctx.isPointInPath(target_position.mouseX, target_position.mouseY))
      move_on = 0
    if move_on is 1
      if alfas is "true"
        alfas = "false"
        delay 100, ()-> self.calculating_destination(diffX, diffY)
    
    
  calculating_destination: (diffX, diffY) ->
    last_position = this_position
    diffX=diffX
    diffY=diffY
    if diffX > 0
      if diffY > 0
        if diffX > diffY
          this_position = mouseX: this_position.mouseX+speed, mouseY: this_position.mouseY+diffY/diffX*speed
        if diffX < diffY
          this_position = mouseX: this_position.mouseX+diffX/diffY*speed, mouseY: this_position.mouseY+speed
        if diffX is diffY
          this_position = mouseX: this_position.mouseX+speed, mouseY: this_position.mouseY+speed
      if diffY < 0
        if diffX > -diffY
          this_position = mouseX: this_position.mouseX+speed, mouseY: this_position.mouseY+diffY/diffX*speed
        if diffX < -diffY
          this_position = mouseX: this_position.mouseX+diffX/(-diffY)*speed, mouseY: this_position.mouseY-speed
        if diffX is -diffY
          this_position = mouseX: this_position.mouseX+speed, mouseY: this_position.mouseY-speed
          
    if diffX < 0
      if diffY > 0
        if -diffX > diffY
          this_position = mouseX: this_position.mouseX-speed, mouseY: this_position.mouseY+diffY/(-diffX)*speed
        if -diffX < diffY
          this_position = mouseX: this_position.mouseX+diffX/diffY*speed, mouseY: this_position.mouseY+speed
        if -diffX is diffY
          this_position = mouseX: this_position.mouseX-speed, mouseY: this_position.mouseY+speed
      if diffY < 0
        if -diffX > -diffY
          this_position = mouseX: this_position.mouseX-speed, mouseY: this_position.mouseY-(-diffY)/(-diffX)*speed
        if -diffX < -diffY
          this_position = mouseX: this_position.mouseX-(-diffX)/(-diffY)*speed, mouseY: this_position.mouseY-speed
        if -diffX is -diffY
          this_position = mouseX: this_position.mouseX-speed, mouseY: this_position.mouseY-speed
          
    if diffX is 0
      if diffY > 0
        this_position = mouseX: this_position.mouseX, mouseY: this_position.mouseY+speed
      if diffY < 0
        this_position = mouseX: this_position.mouseX, mouseY: this_position.mouseY-speed
      if diffY is 0
        this_position = mouseX: this_position.mouseX, mouseY: this_position.mouseY
        
    if diffY is 0
      if diffX > 0
        this_position = mouseX: this_position.mouseX+speed, mouseY: this_position.mouseY
      if diffX < 0
        this_position = mouseX: this_position.mouseX-speed, mouseY: this_position.mouseY
      if diffX is 0
        this_position = mouseX: this_position.mouseX, mouseY: this_position.mouseY
    @canvas()
    alfas = "true"
    @timer_to_destination()
  



