class HardWorker < WebsocketRails::BaseController
  include Sidekiq::Worker
  require 'sidekiq/api'
  
  def perform
    sleep 2
    puts "started background job"
    self.recalculate
  end
  
  def enemy_killed_player
    $redis.hset "mobs:#{data}", 'attacked', 0
    xposDest = ($redis.hget "mobs:#{data}", 'xposDest').to_i
    yposDest = ($redis.hget "mobs:#{data}", 'yposDest').to_i
    mob = {id: data, xposDest:xposDest, yposDest:yposDest, attacked:0}
    WebsocketRails[:channel_name].trigger(:event_name, mob)
  end
  
  def player_killed_enemy
    $redis.hset "mobs:#{data}", 'attacked', 0
    $redis.hset "mobs:#{data}", 'killed', 1
  end
  
  def player_attacks_enemy
    xpos = ($redis.hget "mobs:#{data[:id]}", 'xpos').to_i
    ypos = ($redis.hget "mobs:#{data[:id]}", 'ypos').to_i
    mob = {id: data[:id], xposDest:xpos, yposDest:ypos}
    WebsocketRails[:channel_name].trigger(:event_name, mob)
    $redis.hset "mobs:#{data[:id]}", 'attacked', 1
  end
  
  def reset_database
    $redis.pipelined do
      (0...20).each do |mob_count|
        $redis.rpush "mobs", mob_count
        $redis.hset "mobs:#{mob_count}", 'id', "#{mob_count}"
        $redis.hset "mobs:#{mob_count}", 'xpos', 150
        $redis.hset "mobs:#{mob_count}", 'ypos', 125
        $redis.hset "mobs:#{mob_count}", 'xposDest', 175
        $redis.hset "mobs:#{mob_count}", 'yposDest', 150
        $redis.hset "mobs:#{mob_count}", 'level', "#{mob_count}"
        $redis.hset "mobs:#{mob_count}", 'attacked', 0
        $redis.hset "mobs:#{mob_count}", 'killed', 0
        $redis.hset "mobs:#{mob_count}", 'steps', 10
        if mob_count == 0
          $redis.hset "mobs:#{mob_count}", 'health', 10
          $redis.hset "mobs:#{mob_count}", 'max_health', 10
        else
          $redis.hset "mobs:#{mob_count}", 'health', "#{(mob_count*25)}"
          $redis.hset "mobs:#{mob_count}", 'max_health', "#{(mob_count*25)}"
        end
      end
    end
  end

  def recalculate
    @reload_rate = 0.5
    @mob_speed = 5*@reload_rate
    def check_monsters
      (1..(2**(0.size * 8 -2) -1)).each do |number|
        monster_list = $redis.lrange('mobs', 0, -1)
        monster_list.each do |mob|
          attacked = ($redis.hget "mobs:#{mob}", 'attacked').to_i
          killed = ($redis.hget "mobs:#{mob}", 'killed').to_i
          if attacked == 0
            xpos = ($redis.hget "mobs:#{mob}", 'xpos').to_i
            ypos = ($redis.hget "mobs:#{mob}", 'ypos').to_i
            xposDest = ($redis.hget "mobs:#{mob}", 'xposDest').to_i
            yposDest = ($redis.hget "mobs:#{mob}", 'yposDest').to_i
            steps = ($redis.hget "mobs:#{mob}", 'steps').to_i
            if killed == 0
              if steps > 0
                $redis.hset "mobs:#{mob}", 'xpos', ((1-1.0/steps)*xpos+1.0/steps*xposDest).to_i
                $redis.hset "mobs:#{mob}", 'ypos', ((1-1.0/steps)*ypos+1.0/steps*yposDest).to_i
                $redis.hincrby "mobs:#{mob}", 'steps', -1
              else  #if steps <= 0
                recalculate_mob_destination(mob, xposDest, yposDest)
              end
            else  #if killed is 1
              respawn_mob(mob)
              $redis.hset "mobs:#{mob}", 'killed', 0
            end
          end
        end
        sleep @reload_rate
      end
    end
    
    def respawn_mob(mob)
      newX = Random.new.rand(50...1000)
      newY = Random.new.rand(30...350)
      $redis.pipelined do
        $redis.hset "mobs:#{mob}", 'xpos', newX
        $redis.hset "mobs:#{mob}", 'ypos', newY
      end
      recalculate_mob_destination(mob, newX, newY)
    end
    
    def recalculate_mob_destination(mob, xposDest, yposDest)
      spawn_radius = 100
      newXpos = (Random.new.rand((xposDest-spawn_radius)...(xposDest+spawn_radius))).to_i
      newYpos = (Random.new.rand((yposDest-spawn_radius)...(yposDest+spawn_radius))).to_i
      if 0 < newXpos &&  newXpos < 1100 && 0 < newYpos && newYpos < 380
        steps = (Math.sqrt((newXpos-xposDest)*(newXpos-xposDest)+(newYpos-yposDest)*(newYpos-yposDest))/@mob_speed).to_i
        $redis.pipelined do
          $redis.hset "mobs:#{mob}", 'steps', steps
          $redis.hset "mobs:#{mob}", 'xposDest', newXpos
          $redis.hset "mobs:#{mob}", 'yposDest', newYpos
          $redis.hset "mobs:#{mob}", 'xpos', xposDest
          $redis.hset "mobs:#{mob}", 'ypos', yposDest
        end
        level = ($redis.hget "mobs:#{mob}", 'level').to_i
        health = ($redis.hget "mobs:#{mob}", 'health').to_i
        max_health = ($redis.hget "mobs:#{mob}", 'max_health').to_i
        attacked = ($redis.hget "mobs:#{mob}", 'attacked').to_i
        mob = {id: mob, xpos: xposDest, ypos: yposDest, xposDest: newXpos, yposDest: newYpos, level:level,
        health:health, max_health:max_health, attacked:attacked}
        WebsocketRails[:channel_name].trigger(:event_name, mob)
      else
        recalculate_mob_destination(mob, xposDest, yposDest)  
      end
    end
    check_monsters
  end
end